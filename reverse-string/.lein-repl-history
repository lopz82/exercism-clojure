(last "DAS")
(map (last "DAS"))
(apply (last "DAS"))
(apply last "DAS")
(reduce last "DAS")
(reduce last '() "DAS")
(reduce last [] "DAS")
(conj (rest "DAS" last "DAS"))
(conj (rest "DAS") (last "DAS"))
(conj (rest "DAS") (first "DAS"))
(conj (rest "DAS") (last "DAS"))
(reduce conj '() [1 2 3 4])
(reduce conj '() "DAS")
(conj '() "DAS")
(conj '() (list "DAS"))
(conj '() '("D" "A" "S"))
(conj "DAS")
(conj "X" "DAS")
(conj '() "D")
(conj '() "DAS")
(reduce conj '() "DAS")
(conj '() "D")
(conj '("D") "A")
(reduce str '("D" "A" "S"))
(reduce str (reduce conj '() "DAS"))
(reduce str (reduce conj '() "S"))
(str "\S")
(str \S)
(quit)
(into () "DAS")
(into () (seq "DAS"))
(into () "DAS")
(str (into () "DAS")
(str (into () "DAS"))
(apply str (into () "DAS"))
(map str (into () "DAS"))
(quiT)
(quit)
(def doubler (partial * 2))
doubler
(doubler 10)
(doubler 10 5)
(transduce 
(map odd?)
a =(map odd?)
(def a (map odd?))
a
(a [1 2 3 4 5])
(transduce (a [1 2 3 4 5]))
(transduce [1 2 3 4 5] a)
(transduce a (range 5)))
(transduce a (range 5))
(transduce a  + (range 5))
(def a (filter odd?))
(transduce a  + (range 5))
(transduce a  conj (range 5))
(transduce a - (range 5))
(transduce a * (range 5))
(transduce a / (range 5))
(transduce a + (range 100))
(transduce (filter even?) + (range 100))
