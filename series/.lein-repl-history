(take 3 "DASLOS")
(reduce  '[] (take 3 "DASLOS"))
(reduce  '[] "DASLOS")
(reduce take '[] "DASLOS")
(reduce take 3 "DASLOS")
(take 3 "DASLOS")
(spit-at 3 "DASLOS")
(split-at 2 [1 2 3 4 5])
(spit-at 3 (seq "DASLOS"))
(seq "DAS")
(take 3 (seq "DASLOS"))
(split-at 3 (seq "DASLOS"))
(map str (split-at 3 (seq "DASLOS")))
(map clojure.string/join (split-at 3 (seq "DASLOS")))
(seq "DASLOS")
take 3(seq "DASLOS")
(take 3 (seq "DASLOS"))
(map (take 3 (seq "DASLOS")))
(first "DAS")
(require '[clojure.string :as str])
(str/split "q1w2e3r4t5y6u7i8o9p0" #"\d+")
(str/split "q1w2e3r4t5y6u7i8o9p0" #"\d{3}")
(take 3  "49142")
(cons "49142")
(cons x "49142")
(next "DAS")
(map next "DAS")
(map next (seq "DAS"))
(next (seq "DAS"))
(apply next (seq "DAS"))
(apply '[] (seq "DAS"))
(take 3 (next (seq "DAS")))
(take 3 (next (seq "AS")))
(take 3 "12345")
(conj '[] (take 3 "12345"))
(conj '[] (clojure.string/join (take 3 "12345")))
(quit)
(partition 2 "DASDASDAS")
(partition 1 2 "DASDASDAS")
(partition 2 1 "DASDASDAS")
(partition 2 1 "DAS")
(quit)
